/**
 * @file core.dox
 * @brief Core Module Documentation
 * 
 * This file contains detailed documentation for the core module components
 * including TaskContext, DefineTask, KernelConfig and related functions.
 */

/**
 * @defgroup Task Task Management
 * @brief Task management functionality
 * 
 * This group contains all task-related structures and functions for managing
 * coroutine-based tasks in the system.
 */

/**
 * @defgroup Kernel Kernel Operations
 * @brief Kernel configuration and operations
 * 
 * This group contains kernel-level configuration and operational functions.
 */

/**
 * @struct ak::TaskContext
 * @brief Define a context for a task coroutine
 * @ingroup Task
 * 
 * The TaskContext struct represents the context for a task coroutine. It manages 
 * the task's state, I/O operations, and various linked lists for task management.
 * 
 * This structure serves as the promise type for coroutines and contains all the
 * necessary state information for task execution, suspension, and resumption.
 */

/**
 * @struct ak::DefineTask
 * @brief Marks a Task coroutine function
 * @ingroup Task
 * 
 * The DefineTask struct is used to mark and define task coroutine functions. 
 * It wraps a TaskHdl and provides the necessary promise_type for coroutine 
 * functionality.
 * 
 * This is the return type for coroutine functions that represent tasks in the system.
 */

/**
 * @struct ak::KernelConfig
 * @brief Configuration for the Kernel
 * @ingroup Kernel
 * 
 * The KernelConfig struct contains configuration parameters for initializing 
 * the kernel, including memory allocation and I/O entry count settings.
 * 
 * This structure is used to configure the kernel before initialization.
 */

/**
 * @fn void ClearTaskHdl(TaskHdl* hdl)
 * @brief Clears the target TaskHdl
 * @ingroup Task
 * 
 * @param hdl The handle to be cleared
 * 
 * Resets a TaskHdl to its default (empty) state, making it invalid.
 */

/**
 * @fn bool IsTaskHdlValid(const TaskHdl& hdl)
 * @brief Checks if a TaskHdl is valid
 * @ingroup Task
 * 
 * @param hdl The handle to be checked
 * @return true if the TaskHdl points to a valid task (non-null address)
 * 
 * Returns true if the TaskHdl points to a valid task (non-null address).
 */

/**
 * @fn TaskContext* GetTaskContext(const TaskHdl& hdl)
 * @brief Returns the TaskContext associated with the target TaskHdl
 * @ingroup Task
 * 
 * @param hdl The task handle
 * @return The TaskContext associated with the target TaskHdl
 * 
 * Retrieves the TaskContext (promise) from a given TaskHdl.
 */

/**
 * @fn TaskContext* GetTaskContext()
 * @brief Returns the TaskContext for the currently executing task
 * @ingroup Task
 * 
 * @return The TaskContext associated with the current task
 * 
 * Retrieves the TaskContext (promise) for the currently executing task.
 */

/**
 * @fn auto GetCurrentTask()
 * @brief Get the current Task
 * @ingroup Task
 * 
 * @return [Async] TaskHdl - Handle to the current task
 * 
 * Asynchronously retrieves a handle to the currently executing task.
 * This is an awaitable operation that returns the current task handle.
 */

/**
 * @fn auto SuspendTask()
 * @brief Suspends the current Task and resumes the Scheduler
 * @ingroup Task
 * 
 * @return [Async] void
 * 
 * Suspends the current task execution and yields control back to the scheduler.
 * This is an awaitable operation that allows other tasks to run.
 */

/**
 * @fn auto JoinTask(TaskHdl hdl)
 * @brief Suspends the current Task until the target Task completes
 * @ingroup Task
 * 
 * @param hdl A handle to the target Task
 * @return [Async] void
 * 
 * Waits for the specified task to complete before resuming execution.
 * This is an awaitable operation that blocks until the target task finishes.
 */

/**
 * @fn auto operator co_await(TaskHdl hdl)
 * @brief Alias for JoinTask - provides co_await syntax support
 * @ingroup Task
 * 
 * @param hdl A handle to the target Task
 * @return [Async] void
 * 
 * Provides co_await syntax support for joining tasks. This allows using
 * the standard C++ coroutine syntax: `co_await task_handle`.
 */

/**
 * @fn TaskState GetTaskState(const TaskHdl& hdl)
 * @brief Returns the current TaskState
 * @ingroup Task
 * 
 * @param hdl A handle to the target Task
 * @return The current TaskState
 * 
 * Retrieves the current state of the specified task. The state indicates
 * whether the task is running, ready, waiting, or in another state.
 */

/**
 * @fn bool IsTaskDone(const TaskHdl& hdl)
 * @brief Returns true if the target Task is done
 * @ingroup Task
 * 
 * @param hdl A handle to the target Task
 * @return true if the target Task is done, false otherwise
 * 
 * Checks whether the specified task has completed execution.
 */

/**
 * @fn auto ResumeTask(TaskHdl hdl)
 * @brief Resumes a Task that is in TaskState::READY
 * @ingroup Task
 * 
 * @param hdl A handle to the target Task
 * @return [Async] TaskHdl - Handle to the resumed task
 * 
 * Resumes execution of a task that is in the READY state. This is an
 * awaitable operation that switches execution to the specified task.
 */
